#!/usr/bin/python
# -*- coding: utf-8 -*-

# version 0.2

import codecs
import getopt
import re
import string
import sys
import time

DIRECTION_SC2TC = 1
DIRECTION_TC2SC = 2

DOCTYPE_NORMAL = 0
DOCTYPE_WML = 1

def sort_by_priority_and_length(s1, s2):
    p1 = (s1[0], 1000 - len(s1[1]), s1[1] != s1[2])
    p2 = (s2[0], 1000 - len(s2[1]), s2[1] != s2[2])
    if p1 < p2: return -1
    else: return 0

class Converter:
    direction = None
    doctype = None
    table = {}
    sorted = False

    def __init__(self, direction, doctype):
        self.direction = direction
        self.doctype = doctype
        return

    def import_table(self, filename, priority):
        print "Importing from %s" % filename
        value_length = 0
        wordfile = codecs.open(filename, 'r', 'utf8')
        line = wordfile.readline()
        while line != '':
            words = line.split(',')
            if len(words) >= 2:
                if len(words) == 2: words[1] = words[1][:1]
                if self.direction == DIRECTION_TC2SC:
                    key = words[0]
                    value = words[1]
                else:
                    key = words[1]
                    value = words[0]
                first = key[0]
                if self.table.has_key(first):
                    t = self.table[first]
                else:
                    t = []
                    self.table[first] = t
                t.append((priority, key, value))
            line = wordfile.readline()
        wordfile.close()
        self.sorted = False
        return

    def convert(self, line):
        if not self.sorted:
            for t in self.table.values():
                t.sort(sort_by_priority_and_length)
        newline = ''
        i = 0
        while i < len(line):
            if self.table.has_key(line[i]):
                replaced = False
                for priority, key, value in self.table[line[i]]:
                    l = len(key)
                    if i + l >= len(line): continue
                    if line[i:i+l] == key:
                        newline = newline + value
                        i = i + l - 1
                        replaced = True
                        break
                if not replaced: newline = newline + line[i]
            else:
                newline = newline + line[i]
            i = i + 1
        return newline

def usage():
    print """
Simpilifed and Traditional Chinese Converter.
Usage: stcc -t|-s [-w] [-d dictionary] srcfile destfile
 Arguments               Meaning
 -t --traditional        Convert into tranditional Chinese.
 -s --simplified         Convert into simplified Chinese.
 -w --wml                Document is in WML.
 -h --help               Show this help message
 -d --dictionary=        Additional dictionary
 Source file and destination file should in UTF-8 encoding."""

def main():

    time1 = time.time()
    dicts = []
    try:
        opts, args = getopt.getopt(sys.argv[1:], "htswd:",
                                   ["help", "traditional", "simplified",
                                    "wml", "dictionary="])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    direction = None
    doctype = DOCTYPE_NORMAL
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit(0)
        if o in ("-t", "--traditional"):
            direction = DIRECTION_SC2TC
        if o in ("-s", "--simplified"):
            direction = DIRECTION_TC2SC
        if o in ("-w", "--wml"):
            doctype = DOCTYPE_WML
        if o in ("-d", "--dictionary"):
            dicts.append(a)
    if len(args) < 2:
        usage()
        sys.exit(2)

    priority = 1
    wordcon = Converter(direction, doctype)
    for d in dicts:
        wordcon.import_table(d, priority)
        priority += 1
    #wordcon.import_table('computer.tbl')
    #wordcon.import_table('general.tbl')
    #wordcon.import_table('character.tbl')

    inf = codecs.open(args[0], 'r','utf8')
    outf = codecs.open(args[1], 'w', 'utf8')

    line = string.join(inf.readlines())
    #while line != '':
    line = wordcon.convert(line)
    outf.write(line)
    #    line = inf.readline()

    inf.close()
    outf.close()
    time2 = time.time()
    print time2 - time1

if __name__ == "__main__":
    main()
